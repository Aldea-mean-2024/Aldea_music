const Song = require('../models/song');
const fs = require('fs');
const path = require('path');

// Directory where audio files will be saved
const audioDir = path.join(__dirname, '..', 'public', 'audio');

const songsController = {
    index: (req, res) => {
        Song.getAll((err, results) => {
            if (err) {
                return res.status(500).send(err);
            }
            res.render('index', { songs: results });
        });
    },
    add: (req, res) => {
        res.render('add');
    },
    create: (req, res) => {
        const { title, artist, filename } = req.body; // Get filename from the text input
        const newSong = {
            title,
            artist,
            filename // Use the filename provided in the form
        };

        // Check if the file exists before adding the song
        const filePath = path.join(audioDir, filename);
        if (!fs.existsSync(filePath)) {
            return res.status(404).send(`File not found: ${filename}`);
        }

        Song.add(newSong, (err) => {
            if (err) {
                return res.status(500).send(err);
            }
            res.redirect('/');
        });
    },
    delete: (req, res) => {
        const { id } = req.params; // Correctly fetch the ID from URL params
        Song.getById(id, (err, song) => {
            if (err || !song) {
                return res.status(500).send(err || 'Song not found');
            }
            const filePath = path.join(audioDir, song.filename);

            // Check if the file exists before deleting the song
            if (fs.existsSync(filePath)) {
                fs.unlink(filePath, (err) => {
                    if (err) {
                        return res.status(500).send(err);
                    }
                });
            }

            Song.delete(id, (err) => {
                if (err) {
                    return res.status(500).send(err);
                }
                res.redirect('/');
            });
        });
    },
    update: (req, res) => {
        const { title, artist, filename } = req.body; // Get filename from the text input
        const { id } = req.params;
    
        // Prepare the data to be updated
        const updatedSong = {
            title,
            artist,
            filename // Use the filename provided in the form
        };
    
        // Fetch current song to retain filename if filename is empty
        Song.getById(id, (err, existingSong) => {
            if (err) {
                return res.status(500).send(err);
            }
    
            // If no filename provided, keep the existing filename
            if (!updatedSong.filename) {
                updatedSong.filename = existingSong.filename;
            } else {
                // Check if the new file exists
                const filePath = path.join(audioDir, updatedSong.filename);
                if (!fs.existsSync(filePath)) {
                    return res.status(404).send(`File not found: ${updatedSong.filename}`);
                }
            }
    
            console.log("Updating song:", updatedSong); // Debug log
    
            // Proceed to update the song with the complete data
            Song.update(id, updatedSong, (err) => {
                if (err) {
                    return res.status(500).send(err);
                }
                res.redirect('/'); // Redirect back to the playlist
            });
        });
    },
    edit: (req, res) => {
        const { id } = req.params;
        Song.getById(id, (err, song) => {
            if (err) {
                console.error(err);
                return res.status(500).send(err);
            }
            if (!song) {
                return res.status(404).send("Song not found");
            }
            res.render('edit', { song }); // Here you pass the song object to the view
        });
    },
};

module.exports = songsController;
